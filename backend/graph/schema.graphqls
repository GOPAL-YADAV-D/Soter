scalar Time

type User {
  id: ID!
  username: String!
  email: String!
  createdAt: Time!
  updatedAt: Time!
}

type Organization {
  id: ID!
  name: String!
  description: String
  createdAt: Time!
  updatedAt: Time!
  members: [User!]!
}

type File {
  id: ID!
  filename: String!
  originalName: String!
  contentType: String!
  size: Int!
  sha256: String!
  uploadedBy: User!
  uploadedAt: Time!
  downloadCount: Int!
  isPublic: Boolean!
  shareToken: String
  organization: Organization
}

type FileStats {
  logicalStorage: Int!
  physicalStorage: Int!
  savedBytes: Int!
  savedPercentage: Float!
}

type HealthStatus {
  status: String!
  database: String!
  storage: String!
  timestamp: Time!
}

type Query {
  # Health check
  health: HealthStatus!
  
  # User queries
  me: User
  users: [User!]!
  
  # File queries
  files: [File!]!
  file(id: ID!): File
  
  # Organization queries
  organizations: [Organization!]!
  organization(id: ID!): Organization
  
  # Statistics
  fileStats: FileStats!
}

type Mutation {
  # User mutations
  createUser(username: String!, email: String!, password: String!): User!
  
  # Organization mutations
  createOrganization(name: String!, description: String): Organization!
  
  # File mutations (placeholder for now)
  uploadFile(filename: String!, contentType: String!): File!
}

type Subscription {
  # File upload progress (future feature)
  uploadProgress(fileId: ID!): Int!
}